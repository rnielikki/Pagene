### YamlMime:ManagedReference
items:
- uid: Pagene.BlogSettings.AppPathInfo
  commentId: T:Pagene.BlogSettings.AppPathInfo
  id: AppPathInfo
  parent: Pagene.BlogSettings
  children:
  - Pagene.BlogSettings.AppPathInfo.BlogContentPath
  - Pagene.BlogSettings.AppPathInfo.BlogEntryPath
  - Pagene.BlogSettings.AppPathInfo.BlogFilePath
  - Pagene.BlogSettings.AppPathInfo.BlogHashPath
  - Pagene.BlogSettings.AppPathInfo.BlogInputPath
  - Pagene.BlogSettings.AppPathInfo.BlogTagPath
  - Pagene.BlogSettings.AppPathInfo.ContentPath
  - Pagene.BlogSettings.AppPathInfo.EntryPath
  - Pagene.BlogSettings.AppPathInfo.FilePath
  - Pagene.BlogSettings.AppPathInfo.HashPath
  - Pagene.BlogSettings.AppPathInfo.InputPath
  - Pagene.BlogSettings.AppPathInfo.OutputPath
  - Pagene.BlogSettings.AppPathInfo.TagPath
  langs:
  - csharp
  - vb
  name: AppPathInfo
  nameWithType: AppPathInfo
  fullName: Pagene.BlogSettings.AppPathInfo
  type: Class
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: AppPathInfo
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 7
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nFile input/output paths. Only relative paths are used.\n"
  example: []
  syntax:
    content: public static class AppPathInfo
    content.vb: Public Module AppPathInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Pagene.BlogSettings.AppPathInfo.InputPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.InputPath
  id: InputPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: InputPath
  nameWithType: AppPathInfo.InputPath
  fullName: Pagene.BlogSettings.AppPathInfo.InputPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: InputPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 13
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nInput folder path name. Files from this path will be converted.\n"
  example: []
  syntax:
    content: public static string InputPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property InputPath As String
  overload: Pagene.BlogSettings.AppPathInfo.InputPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.OutputPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.OutputPath
  id: OutputPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: OutputPath
  nameWithType: AppPathInfo.OutputPath
  fullName: Pagene.BlogSettings.AppPathInfo.OutputPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: OutputPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 18
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nOutput folder root, which contains all converted contens and tag files.\n"
  example: []
  syntax:
    content: public static string OutputPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property OutputPath As String
  overload: Pagene.BlogSettings.AppPathInfo.OutputPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.ContentPath
  commentId: F:Pagene.BlogSettings.AppPathInfo.ContentPath
  id: ContentPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: ContentPath
  nameWithType: AppPathInfo.ContentPath
  fullName: Pagene.BlogSettings.AppPathInfo.ContentPath
  type: Field
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: ContentPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 23
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nContent path name for blog posts. This path contains blog posts.\nIt affaects to <xref href=\"Pagene.BlogSettings.AppPathInfo.InputPath\" data-throw-if-not-resolved=\"false\"></xref> too, where post files before converting are.\n"
  example: []
  syntax:
    content: public const string ContentPath = "contents/"
    return:
      type: System.String
    content.vb: Public Const ContentPath As String = "contents/"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Pagene.BlogSettings.AppPathInfo.EntryPath
  commentId: F:Pagene.BlogSettings.AppPathInfo.EntryPath
  id: EntryPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: EntryPath
  nameWithType: AppPathInfo.EntryPath
  fullName: Pagene.BlogSettings.AppPathInfo.EntryPath
  type: Field
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: EntryPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 27
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nBlog entries for showing lists on certaion conditions, such as list of tags or recent posts.\n"
  example: []
  syntax:
    content: public const string EntryPath = "entries/"
    return:
      type: System.String
    content.vb: Public Const EntryPath As String = "entries/"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Pagene.BlogSettings.AppPathInfo.FilePath
  commentId: F:Pagene.BlogSettings.AppPathInfo.FilePath
  id: FilePath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: FilePath
  nameWithType: AppPathInfo.FilePath
  fullName: Pagene.BlogSettings.AppPathInfo.FilePath
  type: Field
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: FilePath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 32
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nPath name of any blog attachments, relative to content path.\nBlog post can reference by linkining to the filePath.\n"
  example: []
  syntax:
    content: public const string FilePath = "files/"
    return:
      type: System.String
    content.vb: Public Const FilePath As String = "files/"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Pagene.BlogSettings.AppPathInfo.TagPath
  commentId: F:Pagene.BlogSettings.AppPathInfo.TagPath
  id: TagPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: TagPath
  nameWithType: AppPathInfo.TagPath
  fullName: Pagene.BlogSettings.AppPathInfo.TagPath
  type: Field
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: TagPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 36
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nTag file path name, inside entry path. Contains tag files as number and meta.tags.json for the list of tags.\n"
  example: []
  syntax:
    content: public const string TagPath = "tags/"
    return:
      type: System.String
    content.vb: Public Const TagPath As String = "tags/"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Pagene.BlogSettings.AppPathInfo.HashPath
  commentId: F:Pagene.BlogSettings.AppPathInfo.HashPath
  id: HashPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: HashPath
  nameWithType: AppPathInfo.HashPath
  fullName: Pagene.BlogSettings.AppPathInfo.HashPath
  type: Field
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: HashPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 40
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nHash file path name. Hash stores each file hash to check if the file has changed.\n"
  example: []
  syntax:
    content: public const string HashPath = ".hash/"
    return:
      type: System.String
    content.vb: Public Const HashPath As String = ".hash/"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Pagene.BlogSettings.AppPathInfo.BlogInputPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.BlogInputPath
  id: BlogInputPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: BlogInputPath
  nameWithType: AppPathInfo.BlogInputPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogInputPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: BlogInputPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 46
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nPath, which cRelative to main program (or user-defined) path.ontains unconverted blog posts. (*.md format) Relative to main program (or user-defined) path.\n"
  example: []
  syntax:
    content: public static string BlogInputPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property BlogInputPath As String
  overload: Pagene.BlogSettings.AppPathInfo.BlogInputPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.BlogFilePath
  commentId: P:Pagene.BlogSettings.AppPathInfo.BlogFilePath
  id: BlogFilePath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: BlogFilePath
  nameWithType: AppPathInfo.BlogFilePath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogFilePath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: BlogFilePath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 51
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nAttachment file path relative to the output path.\nCan contain not only pictures, but texts, documents, codes and anything etc.\n"
  example: []
  syntax:
    content: public static string BlogFilePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property BlogFilePath As String
  overload: Pagene.BlogSettings.AppPathInfo.BlogFilePath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.BlogContentPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.BlogContentPath
  id: BlogContentPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: BlogContentPath
  nameWithType: AppPathInfo.BlogContentPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogContentPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: BlogContentPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 55
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nContent file path relative to the output path.\n"
  example: []
  syntax:
    content: public static string BlogContentPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property BlogContentPath As String
  overload: Pagene.BlogSettings.AppPathInfo.BlogContentPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.BlogEntryPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.BlogEntryPath
  id: BlogEntryPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: BlogEntryPath
  nameWithType: AppPathInfo.BlogEntryPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogEntryPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: BlogEntryPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 59
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nEntry file path relative to the output path.\n"
  example: []
  syntax:
    content: public static string BlogEntryPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property BlogEntryPath As String
  overload: Pagene.BlogSettings.AppPathInfo.BlogEntryPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.BlogTagPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.BlogTagPath
  id: BlogTagPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: BlogTagPath
  nameWithType: AppPathInfo.BlogTagPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogTagPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: BlogTagPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 63
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nTag path. Rlative to main program (or user-defined) path.\n"
  example: []
  syntax:
    content: public static string BlogTagPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property BlogTagPath As String
  overload: Pagene.BlogSettings.AppPathInfo.BlogTagPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Pagene.BlogSettings.AppPathInfo.BlogHashPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.BlogHashPath
  id: BlogHashPath
  parent: Pagene.BlogSettings.AppPathInfo
  langs:
  - csharp
  - vb
  name: BlogHashPath
  nameWithType: AppPathInfo.BlogHashPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogHashPath
  type: Property
  source:
    remote:
      path: Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
      branch: experimental
      repo: https://github.com/rnielikki/Pagene.git
    id: BlogHashPath
    path: ../../Pagene.BlogSettings/Pagene.BlogSettings/AppPathInfo.cs
    startLine: 67
  assemblies:
  - Pagene.BlogSettings
  namespace: Pagene.BlogSettings
  summary: "\nHash file Path. Hash stores each file hash to check if the file has changed.\n"
  example: []
  syntax:
    content: public static string BlogHashPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property BlogHashPath As String
  overload: Pagene.BlogSettings.AppPathInfo.BlogHashPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Pagene.BlogSettings
  commentId: N:Pagene.BlogSettings
  name: Pagene.BlogSettings
  nameWithType: Pagene.BlogSettings
  fullName: Pagene.BlogSettings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Pagene.BlogSettings.AppPathInfo.InputPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.InputPath
  name: InputPath
  nameWithType: AppPathInfo.InputPath
  fullName: Pagene.BlogSettings.AppPathInfo.InputPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Pagene.BlogSettings.AppPathInfo.OutputPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.OutputPath
  name: OutputPath
  nameWithType: AppPathInfo.OutputPath
  fullName: Pagene.BlogSettings.AppPathInfo.OutputPath
- uid: Pagene.BlogSettings.AppPathInfo.InputPath
  commentId: P:Pagene.BlogSettings.AppPathInfo.InputPath
  isExternal: true
- uid: Pagene.BlogSettings.AppPathInfo.BlogInputPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.BlogInputPath
  name: BlogInputPath
  nameWithType: AppPathInfo.BlogInputPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogInputPath
- uid: Pagene.BlogSettings.AppPathInfo.BlogFilePath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.BlogFilePath
  name: BlogFilePath
  nameWithType: AppPathInfo.BlogFilePath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogFilePath
- uid: Pagene.BlogSettings.AppPathInfo.BlogContentPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.BlogContentPath
  name: BlogContentPath
  nameWithType: AppPathInfo.BlogContentPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogContentPath
- uid: Pagene.BlogSettings.AppPathInfo.BlogEntryPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.BlogEntryPath
  name: BlogEntryPath
  nameWithType: AppPathInfo.BlogEntryPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogEntryPath
- uid: Pagene.BlogSettings.AppPathInfo.BlogTagPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.BlogTagPath
  name: BlogTagPath
  nameWithType: AppPathInfo.BlogTagPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogTagPath
- uid: Pagene.BlogSettings.AppPathInfo.BlogHashPath*
  commentId: Overload:Pagene.BlogSettings.AppPathInfo.BlogHashPath
  name: BlogHashPath
  nameWithType: AppPathInfo.BlogHashPath
  fullName: Pagene.BlogSettings.AppPathInfo.BlogHashPath
